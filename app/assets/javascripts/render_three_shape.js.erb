function inchesToPixels(inches) {
    return inches * 100;
}

function pixelsToInches(pixels) {
    return pixels / 100.0;
}

function rotateObject(object, degreeX, degreeY, degreeZ){

    degreeX = (degreeX * Math.PI)/180;
    degreeY = (degreeY * Math.PI)/180;
    degreeZ = (degreeZ * Math.PI)/180;

    object.rotateX(degreeX);
    object.rotateY(degreeY);
    object.rotateZ(degreeZ);
}

function radians(angle) {
    return Math.PI * (angle/180);
}

function blockIntersectX(width, height, angle) {
    var rad = radians(angle);
    var w = width / Math.cos(rad);
    var h = height / Math.sin(rad);
    return Math.min(w, h);
}

function blockIntersectY(width, height, angle) {
    var rad = radians(angle);
    var w = width / Math.sin(rad);
    var h = height / Math.cos(rad);
    return Math.min(w, h);
}

// Global variables
var renderer;
var scene;
var camera;
var controls;
var material;

function init_three() {

    var width, height;

    width = $("#weld-render-view").width();
    height = width * 0.75;
    renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setClearColor( 0xe0e0eb );
    renderer.setPixelRatio( window.devicePixelRatio );
    renderer.setSize( width, height );
    $("#weld-render-view").html( renderer.domElement );
    scene = new THREE.Scene();
    var aspectRatio = width / height;
    camera = new THREE.PerspectiveCamera( 45, aspectRatio * 1.2, 1, 10000 );
    camera.position.set( 0, 0, 2000 );

    controls = new THREE.TrackballControls( camera, renderer.domElement );
    controls.minDistance = 100;
    controls.maxDistance = 10000;
    var ambientlight = new THREE.AmbientLight( 0xffffff );
    ambientlight.intensity = 0.6;
    scene.add( ambientlight );
    var light = new THREE.PointLight( 0xffffff );
    light.position.copy( camera.position );
    scene.add( light );

    material = new THREE.MeshLambertMaterial({color: '#a8b2c1', map: new THREE.TextureLoader().load( "<%= asset_path 'metal.png' %>" )});
}

// Reset the view to the default state
function reset_camera() {
    if (controls !== undefined) {
        controls.reset();
        animate();
    }
}

// FIXME: GPU memory is still not cleaning up appropriately
function memCleanup(object) {
    if ( object.geometry ) object.geometry.dispose();
    if ( object.material ) {
        if (object.material.map) object.material.map.dispose();
        object.material.dispose();
    }
    scene.remove(object);
}


function render_three_shape(vue_data) {

    if (scene === undefined) {
        // Initialize the scene and objects on first run.
        init_three();
    } else {
        //If the scene has already been defined, remove the existing meshes.
        for (var i = scene.children.length - 1; i >= 0; i--) {
            if (scene.children[i].isMesh) {
                var mesh = scene.children[i];
                memCleanup(mesh);
                scene.remove(mesh);
            }
        }
    }


    // Don't show a root gap when bead on plate selected
    if (vue_data.joint_data.selected === 'bead_on_plate') {
        vue_data.joint_data.root_gap.present = false;
    }

    switch(vue_data.dimension_data.selected) {
        case 'plate':
            buildPlate(vue_data, scene);
            animate();
            break;
        case 'pipe':
            buildPipe(vue_data, scene);
            animate();
            break;
        case 't_pipe':
            buildTeePipe(vue_data, scene);
            animate();
            break;
        case 'lap_joint':
            buildLapJoint(vue_data, scene);
            animate();
            break;
        case 't_plate':
            buildTeeJoint(vue_data, scene);
            animate();
            break;
        default:
            buildPlate(vue_data, scene);
            animate();
    }

    function buildPlate(vue_data, scene) {
        // Plate
        var plate_data = vue_data.dimension_data.fixture_shapes.find(function (shape) {
            return shape.value === 'plate';
        }, this);

        // dimensions: {
        //    width_w1: 12,
        //    width_w2: 12,
        //    thickness: 0.5,
        //    length: 4
        //}
        var width_w1 = inchesToPixels(plate_data.dimensions.width_w1);
        var width_w2 = inchesToPixels(plate_data.dimensions.width_w2);
        var height = inchesToPixels(plate_data.dimensions.thickness);
        var depth = inchesToPixels(plate_data.dimensions.length);
        var root_gap = vue_data.joint_data.root_gap.present ? inchesToPixels(vue_data.joint_data.root_gap.range) : 0;

        var cube = new THREE.CubeGeometry(width_w1, height, depth);
        var cube2 = new THREE.CubeGeometry(width_w2, height, depth);

        // For custom joint types that are not bead on plate, we need to convert to BSP for subtraction
        if (vue_data.joint_data.selected !== 'bead_on_plate') {
            cube = new ThreeBSP( cube );
            cube2 = new ThreeBSP( cube2 );
        } else {
            cube = new THREE.Mesh( cube, material );
            cube2 = new THREE.Mesh( cube2, material );
        }

        // Add the grooves
        if (vue_data.joint_data.selected === 'bevel_groove') {

            var joint_measurement_a = inchesToPixels(vue_data.joint_data.dimensions.a);
            var joint_measurement_beta = vue_data.joint_data.dimensions.beta;

            var bevel_block_w = height;
            var bevel_block_h = width_w2 * 8;
            var bevel_block_intersect = blockIntersectX(bevel_block_w, bevel_block_h, joint_measurement_beta);
            var bevel_block = new THREE.CubeGeometry(bevel_block_w, bevel_block_h, depth);

            rotateObject(bevel_block, 0, 0, -joint_measurement_beta);
            bevel_block = new THREE.Mesh( bevel_block );

            var bevel_block_left = -((width_w2 / 2.0) + (bevel_block_intersect / 2.0));
            var bevel_block_up = -(bevel_block_w / 2.0) + joint_measurement_a;

            bevel_block.position.set(bevel_block_left, bevel_block_up, 0);

            bevel_block = new ThreeBSP( bevel_block );

            cube2 = cube2.subtract(bevel_block);

            memCleanup(bevel_block);

        } else if (vue_data.joint_data.selected === 'compound_bevel') {



        } else if (vue_data.joint_data.selected === 'j_groove') {

        } else if (vue_data.joint_data.selected === 'u_groove') {

        } else if (vue_data.joint_data.selected === 'v_groove') {

        } else {
            // For bead_on_plate and other, just use the meshes
        }

        if (vue_data.joint_data.selected !== 'bead_on_plate') {
            cube = cube.toMesh( material );
            cube2 = cube2.toMesh( material );
        }

        cube.position.set((-(width_w1 * 0.5) - (root_gap * 0.5)), height, 0);
        scene.add(cube);
        cube2.position.set((width_w2 * 0.5) + (root_gap * 0.5), height, 0);
        scene.add(cube2);
    }

    function buildLapJoint(vue_data, scene) {
        // Lap Joint
        var lap_joint_data = vue_data.dimension_data.fixture_shapes.find(function (shape) {
            return shape.value === 'lap_joint';
        }, this);

        //dimensions: {
        //    thickness_t1: 0.5,
        //    thickness_t2: 0.5,
        //    width_w1: 6,
        //    width_w2: 6,
        //    overlap: 0.5,
        //    length: 20
        //}
        var width_w1 = inchesToPixels(lap_joint_data.dimensions.width_w1);
        var width_w2 = inchesToPixels(lap_joint_data.dimensions.width_w2);
        var height_t1 = inchesToPixels(lap_joint_data.dimensions.thickness_t1);
        var height_t2 = inchesToPixels(lap_joint_data.dimensions.thickness_t2);
        var overlap = inchesToPixels(lap_joint_data.dimensions.overlap);
        var depth = inchesToPixels(lap_joint_data.dimensions.length);
        var root_gap = vue_data.joint_data.root_gap.present ? inchesToPixels(vue_data.joint_data.root_gap.range) : 0;

        var cube = new THREE.CubeGeometry(width_w1, height_t1, depth);
        cube = new THREE.Mesh( cube, material );
        cube.position.set((width_w1 * 0.5) - (overlap * 0.5), (-(height_t1 * 0.5) - (root_gap * 0.5)), 0);
        scene.add(cube);
        var cube2 = new THREE.CubeGeometry(width_w2, height_t2, depth);
        cube2 = new THREE.Mesh( cube2, material );
        cube2.position.set(-((width_w2 * 0.5) - (overlap * 0.5)), ((height_t2 * 0.5) + (root_gap * 0.5)), 0);
        scene.add(cube2);
    }

    function buildTeeJoint(vue_data, scene) {
        // Tee Joint
        var tee_joint_data = vue_data.dimension_data.fixture_shapes.find(function (shape) {
            return shape.value === 't_plate';
        }, this);

        //dimensions: {
        //    thickness_t1: 0.5,
        //    thickness_t2: 0.5,
        //    width_w1: 6,
        //    width_w2: 6,
        //    length_l: 20,
        //    height_h: 4
        //}
        var thickness_t1 = inchesToPixels(tee_joint_data.dimensions.thickness_t1);
        var thickness_t2 = inchesToPixels(tee_joint_data.dimensions.thickness_t2);
        var width_w1 = inchesToPixels(tee_joint_data.dimensions.width_w1);
        var width_w2 = inchesToPixels(tee_joint_data.dimensions.width_w2);
        var depth = inchesToPixels(tee_joint_data.dimensions.length_l);
        var height = inchesToPixels(tee_joint_data.dimensions.height_h);
        var root_gap = vue_data.joint_data.root_gap.present ? inchesToPixels(vue_data.joint_data.root_gap.range) : 0;

        // Base mesh
        var cube = new THREE.CubeGeometry(width_w1 + width_w2, thickness_t1, depth);
        // Upper mesh
        var cube2 = new THREE.CubeGeometry(thickness_t2, height, depth);

        if (vue_data.joint_data.selected === 't_bevel') {
            cube = new THREE.Mesh( cube, material );
            cube2 = new ThreeBSP( cube2 );

            // Get the measurements
            var joint_measurement_a = inchesToPixels(vue_data.joint_data.dimensions.a);
            var joint_measurement_b = inchesToPixels(vue_data.joint_data.dimensions.b);
            var joint_measurement_alpha = vue_data.joint_data.dimensions.alpha;
            var joint_measurement_beta = vue_data.joint_data.dimensions.beta;

            var bevel_block_w = thickness_t2;
            var bevel_block_h = width_w2 * 8;
            var bevel_block_intersect = blockIntersectX(bevel_block_w, bevel_block_h, joint_measurement_beta);
            var bevel_block = new THREE.CubeGeometry(bevel_block_w, bevel_block_h, depth);
            rotateObject(bevel_block, 0, 0, -joint_measurement_beta);
            bevel_block = new THREE.Mesh( bevel_block );

            scene.add(bevel_block);

            var bevel_block_right = 0;
            var bevel_block_up = -200;

            bevel_block.position.set(bevel_block_right, bevel_block_up, 0);

            bevel_block = new ThreeBSP( bevel_block );

            cube2 = cube2.subtract(bevel_block);

            //////////

//            memCleanup(bevel_block);

        }

        //cube = new THREE.Mesh( cube, material );
        cube2 = cube2.toMesh( material );

        cube.position.set((width_w2 * 0.5) - (width_w1 * 0.5), (-(thickness_t1 * 0.5) - (root_gap * 0.5)), 0);
        scene.add(cube);

        cube2.position.set(0, (height * 0.5) + (root_gap * 0.5), 0);
        scene.add(cube2);
    }

    function buildPipe(vue_data, scene) {

        // Pipe
        var pipe_data = vue_data.dimension_data.fixture_shapes.find(function (shape) {
            return shape.value === 'pipe';
        }, this);

        //dimensions: {
        //    outer_diameter: 6,
        //    wall_thickness: 0.2,
        //    length_w1: 4,
        //    length_w2: 4
        //}
        var outer_diameter = inchesToPixels(pipe_data.dimensions.outer_diameter);
        var wall_thickness = inchesToPixels(pipe_data.dimensions.wall_thickness);
        var length_w1 = inchesToPixels(pipe_data.dimensions.length_w1);
        var length_w2 = inchesToPixels(pipe_data.dimensions.length_w2);
        var root_gap = vue_data.joint_data.root_gap.present ? inchesToPixels(vue_data.joint_data.root_gap.range) : 0;

        /*
            CylinderGeometry(radiusTop, radiusBottom, height, radiusSegments, heightSegments, openEnded, thetaStart, thetaLength)

                radiusTop — Radius of the cylinder at the top. Default is 20.
                radiusBottom — Radius of the cylinder at the bottom. Default is 20.
                height — Height of the cylinder. Default is 100.
                radiusSegments — Number of segmented faces around the circumference of the cylinder. Default is 8
                heightSegments — Number of rows of faces along the height of the cylinder. Default is 1.
                openEnded — A Boolean indicating whether the ends of the cylinder are open or capped. Default is false, meaning capped.
                thetaStart — Start angle for first segment, default = 0 (three o'clock position).
                thetaLength — The central angle, often called theta, of the circular sector. The default is 2*Pi, which makes for a complete cylinder.
         */
        var radius = outer_diameter / 2.0;
        var pipe1 = new THREE.CylinderGeometry(radius, radius, length_w1, 90);
        var pipe1_bsp = new ThreeBSP( pipe1 );

        var inside_radius = radius - wall_thickness;

        if (inside_radius > 0) {
            var pipe1_id = new THREE.CylinderGeometry(inside_radius, inside_radius, length_w1 + 2, 90);
            var pipe1_id_bsp = new ThreeBSP( pipe1_id );

            pipe1_bsp = pipe1_bsp.subtract(pipe1_id_bsp);
        }
        var pipe1 = pipe1_bsp.toMesh(material);

        pipe1.position.set(0, (length_w1 * 0.5) + (root_gap * 0.5), 0);
        scene.add(pipe1);



        var pipe2 = new THREE.CylinderGeometry(radius, radius, length_w2, 90);
        var pipe2_bsp = new ThreeBSP( pipe2 );

        if (inside_radius > 0) {
            var pipe2_id = new THREE.CylinderGeometry(inside_radius, inside_radius, length_w2 + 2, 90);
            var pipe2_id_bsp = new ThreeBSP( pipe2_id );

            pipe2_bsp = pipe2_bsp.subtract( pipe2_id_bsp );
        }

        var pipe2 = pipe2_bsp.toMesh( material );

        //pipe2 = new THREE.Mesh( pipe2, material );
        pipe2.position.set(0, -(length_w2 * 0.5) + -(root_gap * 0.5), 0);
        scene.add(pipe2);
    }

    function buildTeePipe(vue_data, scene) {
        // T-Pipe Joint
        // Pipe
        var pipe_data = vue_data.dimension_data.fixture_shapes.find(function (shape) {
            return shape.value === 't_pipe';
        }, this);

        //dimensions: {
        //    outer_diameter: 6,
        //    wall_thickness: 0.5,
        //    flange_thickness_t2: 0.5,
        //    length_w1: 6,
        //    length_w2: 6,
        //    flange_height_h: 2
        //}
        var outer_diameter = inchesToPixels(pipe_data.dimensions.outer_diameter);
        var wall_thickness = inchesToPixels(pipe_data.dimensions.wall_thickness);
        var flange_thickness = inchesToPixels(pipe_data.dimensions.flange_thickness_t2);
        var length_w1 = inchesToPixels(pipe_data.dimensions.length_w1);
        var length_w2 = inchesToPixels(pipe_data.dimensions.length_w2);
        var flange_height = inchesToPixels(pipe_data.dimensions.flange_height_h);
        var root_gap = vue_data.joint_data.root_gap.present ? inchesToPixels(vue_data.joint_data.root_gap.range) : 0;

        /*
            CylinderGeometry(radiusTop, radiusBottom, height, radiusSegments, heightSegments, openEnded, thetaStart, thetaLength)

                radiusTop — Radius of the cylinder at the top. Default is 20.
                radiusBottom — Radius of the cylinder at the bottom. Default is 20.
                height — Height of the cylinder. Default is 100.
                radiusSegments — Number of segmented faces around the circumference of the cylinder. Default is 8
                heightSegments — Number of rows of faces along the height of the cylinder. Default is 1.
                openEnded — A Boolean indicating whether the ends of the cylinder are open or capped. Default is false, meaning capped.
                thetaStart — Start angle for first segment, default = 0 (three o'clock position).
                thetaLength — The central angle, often called theta, of the circular sector. The default is 2*Pi, which makes for a complete cylinder.
         */

        var radius_od = outer_diameter / 2.0;
        var pipe1 = new THREE.CylinderGeometry(radius_od, radius_od, length_w1 + length_w2, 90);
        var pipe1_bsp = new ThreeBSP( pipe1 );

        var inside_radius = radius_od - wall_thickness;
        if (inside_radius > 0) {
            var pipe1_id = new THREE.CylinderGeometry(inside_radius, inside_radius, length_w1 + length_w2 + 2, 90);
            var pipe1_id_bsp = new ThreeBSP( pipe1_id );

            pipe1_bsp = pipe1_bsp.subtract(pipe1_id_bsp);
        }
        var pipe1 = pipe1_bsp.toMesh(material);

        pipe1.position.set(0, -((length_w1 - length_w2) / 2.0), 0);
        scene.add(pipe1);


        // TODO: Does root gap get added to the outside diameter?
        var radius_od_2 = radius_od + root_gap + flange_height;
        var pipe2 = new THREE.CylinderGeometry(radius_od_2, radius_od_2, flange_thickness, 90);
        var pipe2_bsp = new ThreeBSP( pipe2 );

        var inside_radius_2 = radius_od_2 - flange_height;
        var pipe2_id = new THREE.CylinderGeometry(inside_radius_2, inside_radius_2, flange_thickness + 2 , 90);
        var pipe2_id_bsp = new ThreeBSP( pipe2_id );

        var pipe2_sub = pipe2_bsp.subtract( pipe2_id_bsp );
        var pipe2 = pipe2_sub.toMesh( material );

        pipe2.position.set(0, 0, 0);
        scene.add(pipe2);
    }
}

function animate() {
    requestAnimationFrame( animate );
    controls.update();
    renderer.render( scene, camera );
}
